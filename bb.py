import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = '8319799543:AAG8ttS8fLk4FUrVJPnsxIO-5EkZS2J7-ug'
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –≠–º–æ–¥–∑–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
EMOJI_COINS = "ü™ô"
EMOJI_DICE = "üé≤"
EMOJI_SUPPORT = "üõü"
EMOJI_COMPLAINT = "‚ö†Ô∏è"
EMOJI_MONEY = "üíµ"
EMOJI_SLOT = "üé∞"
EMOJI_CARDS = "üé¥"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton(f"{EMOJI_MONEY} –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
        InlineKeyboardButton(f"{EMOJI_DICE} –ò–≥—Ä—ã", callback_data="games"),
        InlineKeyboardButton(f"{EMOJI_SUPPORT} –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support"),
        InlineKeyboardButton(f"{EMOJI_COMPLAINT} –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data="complaint")
    ]
    keyboard.add(*buttons)
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    welcome_text = f"""
    üé∞ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–ê–ù–ï–¢–ö–ò –í–ò–ó–£–ê–õ–¨–ù–´–ï* üé∞

    {EMOJI_COINS} –ò–≥—Ä–∞–π –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π!
    {EMOJI_DICE} –ü–æ–ø—Ä–æ–±—É–π —Å–≤–æ—é —É–¥–∞—á—É –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏–≥—Ä–∞—Ö!
    {EMOJI_MONEY} –í—ã–∏–≥—Ä—ã–≤–∞–π –º–æ–Ω–µ—Ç—ã –∏ –ø–æ–ª—É—á–∞–π –ø—Ä–∏–∑—ã!

    *–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:* üëá
    """
    await message.reply(welcome_text, 
                       parse_mode=types.ParseMode.MARKDOWN, 
                       reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: c.data in ['balance', 'games', 'support', 'complaint'])
async def process_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    
    if callback_query.data == 'balance':
        text = f"""
        {EMOJI_MONEY} *–¢–≤–æ–π –±–∞–ª–∞–Ω—Å* {EMOJI_MONEY}

        üí∞ –ú–æ–Ω–µ—Ç—ã: 1000 {EMOJI_COINS}
        üèÜ –ë–æ–Ω—É—Å—ã: 50 {EMOJI_COINS}

        –ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –∏–≥—Ä–∞–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ!
        """
        await bot.send_message(callback_query.from_user.id, 
                             text, 
                             parse_mode=types.ParseMode.MARKDOWN)
    
    elif callback_query.data == 'games':
        text = f"""
        {EMOJI_DICE} *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã* {EMOJI_DICE}

        1. {EMOJI_SLOT} –°–ª–æ—Ç-–º–∞—à–∏–Ω—ã
        2. {EMOJI_CARDS} –ö–∞—Ä—Ç–æ—á–Ω—ã–µ –∏–≥—Ä—ã
        3. {EMOJI_DICE} –ö–æ—Å—Ç–∏
        4. üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª

        –í—ã–±–µ—Ä–∏ –∏–≥—Ä—É –∏ –∏—Å–ø—ã—Ç–∞–π —É–¥–∞—á—É!
        """
        await bot.send_message(callback_query.from_user.id, 
                             text, 
                             parse_mode=types.ParseMode.MARKDOWN)
    
    elif callback_query.data == 'support':
        text = f"""
        {EMOJI_SUPPORT} *–ü–æ–¥–¥–µ—Ä–∂–∫–∞* {EMOJI_SUPPORT}

        –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Å—è –∫ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É:
        @manager_username

        –ò–ª–∏ –ø–∏—à–∏ –Ω–∞ –ø–æ—á—Ç—É:
        support@manetki-visual.ru
        """
        await bot.send_message(callback_query.from_user.id, 
                             text, 
                             parse_mode=types.ParseMode.MARKDOWN)
    
    elif callback_query.data == 'complaint':
        text = f"""
        {EMOJI_COMPLAINT} *–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è* {EMOJI_COMPLAINT}

        –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∂–∞–ª–æ–±—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–∞–ø–∏—à–∏ –Ω–∞–º:
        @complaints_bot

        –ú—ã —Ü–µ–Ω–∏–º —Ç–≤–æ–µ –º–Ω–µ–Ω–∏–µ –∏ —É–ª—É—á—à–∏–º —Å–µ—Ä–≤–∏—Å!
        """
        await bot.send_message(callback_query.from_user.id, 
                             text, 
                             parse_mode=types.ParseMode.MARKDOWN)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
